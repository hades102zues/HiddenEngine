


// Basic Quad 
struct Vertex vert1 = {glm::vec3(0.5f, 0.5f, 0.0f)};
struct Vertex vert2 = {glm::vec3(0.5f, -0.5f, 0.0f)};
struct Vertex vert3 = {glm::vec3(-0.5f, -0.5f, 0.0f)};
struct Vertex vert4 = {glm::vec3(-0.5f, 0.5f, 0.0f)};

std::vector<Vertex> vertices{vert1, vert2, vert3, vert4};
std::vector<unsigned int> indices{
                             0, 1, 3,      // vertices of the first triangle
                             1, 2, 3       // vertices of the second triangle
};

// Basic Cube
std::vector<Vertex> vertices{
        Vertex {glm::vec3(-0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 0.0f)},
        Vertex {glm::vec3(0.5f, -0.5f, -0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(0.5f,  0.5f, -0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(0.5f,  0.5f, -0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f,  0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 0.0f)},

        Vertex {glm::vec3(-0.5f, -0.5f,  0.5f),  glm::vec2(0.0f, 0.0f)},
        Vertex {glm::vec3(0.5f, -0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(0.5f,  0.5f,  0.5f), glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f,  0.5f,  0.5f),  glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f,  0.5f),  glm::vec2(0.0f, 0.0f)},

        Vertex {glm::vec3(-0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(-0.5f,  0.5f, -0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f,  0.5f),  glm::vec2(0.0f, 0.0f)},
        Vertex {glm::vec3(-0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},

        Vertex {glm::vec3(0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(0.5f,  0.5f, -0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(0.5f, -0.5f, -0.5f), glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(0.5f, -0.5f,  0.5f),  glm::vec2(0.0f, 0.0f)},
        Vertex {glm::vec3(0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},

        Vertex {glm::vec3(-0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(0.5f, -0.5f, -0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(0.5f, -0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(0.5f, -0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f,  0.5f),  glm::vec2(0.0f, 0.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)},

        Vertex {glm::vec3(-0.5f,  0.5f, -0.5f), glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(0.5f,  0.5f, -0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(-0.5f,  0.5f,  0.5f),  glm::vec2(0.0f, 0.0f)},
        Vertex {glm::vec3(-0.5f,  0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)}
};



// Texture Shader
std::string vertexSrc = R"(
    #version 410 core

    layout(location = 0) in vec3 aPosition;
    layout(location = 1) in vec2 aTextureCoords;

    out vec3 v_Position;
    out vec2 v_UVs;
    

    void main() {
        v_Position = aPosition;
        v_UVs = aTextureCoords;
        gl_Position = vec4(aPosition, 1.0);

    }
)";

std::string fragmentSrc = R"(
    #version 410 core

    in vec3 v_Position;
    in vec2 v_UVs;
    uniform sampler2D textureSampler;

    out vec4 f_Color;

    void main() {
        f_Color = texture(textureSampler, v_UVs);
    }

)";


// Basic Shader

std::string vertexSrc = R"(
    #version 330 core
    layout(location = 0) in vec3 aPosition;

    out vec3 v_Position;

    void main() {
        v_Position = aPosition;
        gl_Position = vec4(aPosition, 1.0);

    }
)";

std::string fragmentSrc = R"(
    #version 330 core
    in vec3 v_Position;
    out vec4 f_Color;

    void main() {
        f_Color = vec4(v_Position, 1.0);
    }

)";



// Phong Shader
std::string vertexSrc = R"(
    #version 410 core

    layout(location = 0) in vec3 aPosition;
    layout(location = 1) in vec2 aTextureCoords;
    layout(location = 2) in vec3 aNormal;

    uniform mat4 model;
    uniform mat4 view;
    uniform mat4 projection;


    out vec2 v_TextureUVs;
    out vec3 v_WorldVertex;
    out vec3 v_WorldNormal;
    

    void main() {
        v_TextureUVs = aTextureCoords;

        v_WorldVertex = vec3(model * vec4(aPosition, 1.0));

        mat3 NormalMatrix = mat3(transpose(inverse(model)));
        v_WorldNormal = vec3(NormalMatrix * aNormal);

        gl_Position = projection * view * model * vec4(aPosition, 1.0);

    }
)";

std::string fragmentSrc = R"(
    #version 410 core

    in vec2 v_TextureUVs;
    in vec3 v_WorldVertex;
    in vec3 v_WorldNormal;


    uniform sampler2D uv_DiffuseSamplers[10];
    uniform sampler2D uv_SpecularSamplers[10];
    out vec4 f_Color;

    void main() {
        //*********************
        // Camera
        vec3 cameraPos = vec3(0.0, 0.0, 0.0);

        //*********************
        // Basic Light Properties

        vec3 lightColor = vec3(1.0, 1.0, 1.0);
        vec3 lightPos = vec3(0.0, 5.0, 1.0);
        float lightAmbientIntensity = 0.1;

        //*********************
        // Ambient Calculations

        // AmbientStrength represents what fraction of the original light is now avaiable in the background. 
        float ambientStrenth = lightAmbientIntensity; 
        vec3 ambient = ambientStrenth * lightColor;


        //*********************
        // Diffuse Calculations

        vec3 norm = normalize(v_WorldNormal);
        vec3 toLight = normalize(lightPos - v_WorldVertex);
        float diff = max(dot(toLight, norm), 0.0);
        vec3 diffuse = diff * lightColor;


        //*********************
        // Specular Calculations

        float specularStrength = 0.5;
        vec3 toEye = normalize(cameraPos - v_WorldVertex);
        vec3 reflectedRay = reflect(-toLight, norm);  
        float spec = pow(max(dot(toEye, reflectedRay), 0.0), 32);
        vec3 specular = specularStrength * spec * lightColor; 


       //*********************
        // Results

        vec3 fragColor = texture(uv_DiffuseSamplers[0], v_TextureUVs).xyz;
        vec3 result = ( ambient + diffuse + specular ) * fragColor;

        f_Color = vec4(result, 1.0); 
    }

)";