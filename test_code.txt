


// Basic Quad 
struct Vertex vert1 = {glm::vec3(0.5f, 0.5f, 0.0f)};
struct Vertex vert2 = {glm::vec3(0.5f, -0.5f, 0.0f)};
struct Vertex vert3 = {glm::vec3(-0.5f, -0.5f, 0.0f)};
struct Vertex vert4 = {glm::vec3(-0.5f, 0.5f, 0.0f)};

std::vector<Vertex> vertices{vert1, vert2, vert3, vert4};
std::vector<unsigned int> indices{
                             0, 1, 3,      // vertices of the first triangle
                             1, 2, 3       // vertices of the second triangle
};

// Basic Cube
std::vector<Vertex> vertices{
        Vertex {glm::vec3(-0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 0.0f)},
        Vertex {glm::vec3(0.5f, -0.5f, -0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(0.5f,  0.5f, -0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(0.5f,  0.5f, -0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f,  0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 0.0f)},

        Vertex {glm::vec3(-0.5f, -0.5f,  0.5f),  glm::vec2(0.0f, 0.0f)},
        Vertex {glm::vec3(0.5f, -0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(0.5f,  0.5f,  0.5f), glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f,  0.5f,  0.5f),  glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f,  0.5f),  glm::vec2(0.0f, 0.0f)},

        Vertex {glm::vec3(-0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(-0.5f,  0.5f, -0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f,  0.5f),  glm::vec2(0.0f, 0.0f)},
        Vertex {glm::vec3(-0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},

        Vertex {glm::vec3(0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(0.5f,  0.5f, -0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(0.5f, -0.5f, -0.5f), glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(0.5f, -0.5f,  0.5f),  glm::vec2(0.0f, 0.0f)},
        Vertex {glm::vec3(0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},

        Vertex {glm::vec3(-0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(0.5f, -0.5f, -0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(0.5f, -0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(0.5f, -0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f,  0.5f),  glm::vec2(0.0f, 0.0f)},
        Vertex {glm::vec3(-0.5f, -0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)},

        Vertex {glm::vec3(-0.5f,  0.5f, -0.5f), glm::vec2(0.0f, 1.0f)},
        Vertex {glm::vec3(0.5f,  0.5f, -0.5f),  glm::vec2(1.0f, 1.0f)},
        Vertex {glm::vec3(0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(0.5f,  0.5f,  0.5f),  glm::vec2(1.0f, 0.0f)},
        Vertex {glm::vec3(-0.5f,  0.5f,  0.5f),  glm::vec2(0.0f, 0.0f)},
        Vertex {glm::vec3(-0.5f,  0.5f, -0.5f),  glm::vec2(0.0f, 1.0f)}
};



// Texture Shader
std::string vertexSrc = R"(
    #version 410 core

    layout(location = 0) in vec3 aPosition;
    layout(location = 1) in vec2 aTextureCoords;

    out vec3 v_Position;
    out vec2 v_UVs;
    

    void main() {
        v_Position = aPosition;
        v_UVs = aTextureCoords;
        gl_Position = vec4(aPosition, 1.0);

    }
)";

std::string fragmentSrc = R"(
    #version 410 core

    in vec3 v_Position;
    in vec2 v_UVs;
    uniform sampler2D textureSampler;

    out vec4 f_Color;

    void main() {
        f_Color = texture(textureSampler, v_UVs);
    }

)";


// Basic Shader

std::string vertexSrc = R"(
    #version 330 core
    layout(location = 0) in vec3 aPosition;

    out vec3 v_Position;

    void main() {
        v_Position = aPosition;
        gl_Position = vec4(aPosition, 1.0);

    }
)";

std::string fragmentSrc = R"(
    #version 330 core
    in vec3 v_Position;
    out vec4 f_Color;

    void main() {
        f_Color = vec4(v_Position, 1.0);
    }

)";

std::shared_ptr<Shader> shader = std::make_shared<Shader>(vertexSrc, fragmentSrc);



    HIDDEN_INFO("Engine is running");
    while (mIsRunning) {
        HandleInput();
        Update();

        auto renderCommand = std::make_unique<RenderMesh>(mesh, shader);
        mEngineRenderer->Submit(std::move(renderCommand));
        Render();
  
    }